cscope 15 $HOME/workspace/playercore/scheme2/src/jni -q 0000000275 0000020739
	@Native.cpp

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 
	~<jni.h
>

22 
	~<™droid/log.h
>

24 
	~"medücodec.h
"

26 c⁄° *
	gTAG
 = "NativePlayer";

28 
	#Jni_Pröt
(
¥io
, ...Ë
	`__™droid_log_¥öt
(’rio), 
__VA_ARGS__
)

	)

30 c⁄° *
	ggJavaCœss
 = "com/tencent/mediaplayer/PlayerNative";

32 
	$N©ivePœyîO≥n
(
JNIEnv
 *
ív
, 
jobje˘
 
obj
)

34 
mc_≠i
 
≠i
 = {0};

35 
	`MedüCodecNdk_Inô
(&
≠i
);

37 
	}
}

39 
JNIN©iveMëhod
 c⁄° 
	ggN©iveMëhods
[] = {

40 {"N©ivePœyî_PœyîO≥n", "()V", 
ªöãΩªt_ˇ°
<*>(
N©ivePœyîO≥n
)}

43 
jöt
 
	$JNI_OnLﬂd
(
JavaVM
 *
vm
, *
ª£rved
)

45 
JNIEnv
 *
ív
;

46 i‡(
JNI_OK
 !
vm
->
	`GëEnv
(
ªöãΩªt_ˇ°
<**> (&
ív
), 
JNI_VERSION_1_4
)) {

47 
	`Jni_Pröt
(
ANDROID_LOG_ERROR
, 
TAG
, "Jni_OnLoad Err.\n");

48  
JNI_ERR
;

51 
j˛ass
 
˛s
 = 
ív
->
	`FödCœss
(
gJavaCœss
);

52 i‡(!
˛s
) {

53 
	`Jni_Pröt
(
ANDROID_LOG_ERROR
, 
TAG
, "Jni_OnLoadÇot found java class.\n");

54  
JNI_ERR
;

57 i‡(
JNI_OK
 !
ív
->
	`Regi°îN©ives
(
˛s
, 
gN©iveMëhods
, (gNativeMethods)/(gNativeMethods[0]))) {

58 
	`Jni_Pröt
(
ANDROID_LOG_ERROR
, 
TAG
, "Jni_OnLoad RegisterNatives Err.\n");

59  
JNI_ERR
;

62 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "Jni_OnLoad Ok.\n");

63  
JNI_VERSION_1_4
;

64 
	}
}

66 
	$JNI_OnU∆ﬂd
(
JavaVM
 *
vm
, *
ª£rved
)

68 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "Jni_OnUnLoad Ok.\n");

70 
	}
}

	@mediacodec.h

21 #i‚de‡
VLC_MEDIACODEC_H


22 
	#VLC_MEDIACODEC_H


	)

24 
	~<™droid/log.h
>

26 
	#Jni_Pröt
(
¥io
, ...Ë
	`__™droid_log_¥öt
(’rio), 
__VA_ARGS__
)

	)

28 
mc_≠i
 
	tmc_≠i
;

29 
mc_≠i_sys
 
	tmc_≠i_sys
;

30 
mc_≠i_out
 
	tmc_≠i_out
;

32 (*
	tpf_MedüCodecApi_öô
)(
	tmc_≠i
*);

34 
	`MedüCodecJni_Inô
(
mc_≠i
*);

35 
	`MedüCodecNdk_Inô
(
mc_≠i
*);

37 
	#MC_API_ERROR
 (-1)

	)

38 
	#MC_API_INFO_TRYAGAIN
 (-11)

	)

39 
	#MC_API_INFO_OUTPUT_FORMAT_CHANGED
 (-12)

	)

40 
	#MC_API_INFO_OUTPUT_BUFFERS_CHANGED
 (-13)

	)

43 
	#MC_API_NO_QUIRKS
 0

	)

44 
	#MC_API_QUIRKS_NEED_CSD
 0x1

	)

45 
	#MC_API_VIDEO_QUIRKS_IGNORE_PADDING
 0x2

	)

46 
	#MC_API_VIDEO_QUIRKS_SUPPORT_INTERLACED
 0x4

	)

47 
	#MC_API_AUDIO_QUIRKS_NEED_CHANNELS
 0x8

	)

50 
	#MC_API_VIDEO_QUIRKS_ADAPTIVE
 0x1000

	)

52 
	eMC_OUT_TYPE
 {

53 
MC_OUT_TYPE_BUF
,

54 
MC_OUT_TYPE_CONF
,

57 
	smc_≠i_out


59 
MC_OUT_TYPE
 
ty≥
;

60 
boﬁ
 
b_eos
;

65 
i_ödex
;

66 
uöt64_t
 
i_ts
;

67 c⁄° 
uöt8_t
 *
p_±r
;

68 
size_t
 
i_size
;

69 } 
buf
;

74 
width
, 
height
;

75 
°ride
;

76 
¶i˚_height
;

77 
pixñ_f‹m©
;

78 
¸›_À·
;

79 
¸›_t›
;

80 
¸›_right
;

81 
¸›_bŸtom
;

82 } 
video
;

85 
ch™√l_cou¡
;

86 
ch™√l_mask
;

87 
ßm∂e_øã
;

88 } 
audio
;

89 } 
c⁄f
;

93 
	umc_≠i_¨gs


97 *
p_surÁ˚
;

98 *
p_jsurÁ˚
;

99 
i_width
;

100 
i_height
;

101 
i_™gÀ
;

102 
boﬁ
 
b_tu¬ñed_∂ayback
;

103 
boﬁ
 
b_ad≠tive_∂ayback
;

104 } 
video
;

107 
i_ßm∂e_øã
;

108 
i_ch™√l_cou¡
;

109 } 
audio
;

112 
	ees_f‹m©_ˇãg‹y_e
 {

113 
VIDEO_ES
 = 0,

114 
AUDIO_ES
,

117 
	smc_≠i


119 
mc_≠i_sys
 *
p_sys
;

123 
es_f‹m©_ˇãg‹y_e
 
i_ˇt
;

126 
i_quúks
;

127 *
psz_«me
;

128 
boﬁ
 
b_suµ‹t_rŸ©i⁄
;

130 
boﬁ
 
b_°¨ãd
;

131 
boﬁ
 
b_dúe˘_ªndîög
;

133 (*
˛ón
)(
mc_≠i
 *);

134 (*
c⁄figuª
)(
mc_≠i
 *, 
i_¥ofûe
);

135 (*
°¨t
)(
mc_≠i
 *, 
mc_≠i_¨gs
 *
p_¨gs
);

136 (*
°›
)(
mc_≠i
 *);

137 (*
Êush
)(
mc_≠i
 *);

145 (*
dequeue_ö
)(
mc_≠i
 *, 
öt64_t
 
i_timeout
);

146 (*
dequeue_out
)(
mc_≠i
 *, 
öt64_t
 
i_timeout
);

150 (*
queue_ö
)(
mc_≠i
 *, 
i_ödex
, c⁄° *
p_buf
, 
size_t
 
i_size
,

151 
uöt64_t
 
i_ts
, 
boﬁ
 
b_c⁄fig
);

156 (*
gë_out
)(
mc_≠i
 *, 
i_ödex
, 
mc_≠i_out
 *
p_out
);

159 (*
ªÀa£_out
)(
mc_≠i
 *, 
i_ödex
, 
boﬁ
 
b_ªndî
);

162 (*
ªÀa£_out_ts
)(
mc_≠i
 *, 
i_ödex
, 
öt64_t
 
i_ts_ns
);

166 (*
£t_ouçut_surÁ˚
)(
mc_≠i
*, *
p_surÁ˚
, *
p_jsurÁ˚
);

	@mediacodec_ndk.cpp

24 
	~<jni.h
>

25 
	~<dlf˙.h
>

26 
	~<°döt.h
>

27 
	~<as£π.h
>

28 
	~<™droid/«tive_wödow.h
>

29 
	~<uni°d.h
>

30 
	~<±hªad.h
>

32 
	~"medücodec.h
"

34 
	#THREAD_NAME
 "medücodec_ndk"

	)

38 
	#AMEDIACODEC_FLAG_CODEC_CONFIG
 2

	)

40 
±hªad_muãx_t
 
	gg_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

41 c⁄° *
	gTAG
 = "MediaCodecNdk";

48 
	mAMEDIA_OK
 = 0,

50 
	mAMEDIA_ERROR_BASE
 = -10000,

51 
	mAMEDIA_ERROR_UNKNOWN
 = 
AMEDIA_ERROR_BASE
,

52 
	mAMEDIA_ERROR_MALFORMED
 = 
AMEDIA_ERROR_BASE
 - 1,

53 
	mAMEDIA_ERROR_UNSUPPORTED
 = 
AMEDIA_ERROR_BASE
 - 2,

54 
	mAMEDIA_ERROR_INVALID_OBJECT
 = 
AMEDIA_ERROR_BASE
 - 3,

55 
	mAMEDIA_ERROR_INVALID_PARAMETER
 = 
AMEDIA_ERROR_BASE
 - 4,

57 
	mAMEDIA_DRM_ERROR_BASE
 = -20000,

58 
	mAMEDIA_DRM_NOT_PROVISIONED
 = 
AMEDIA_DRM_ERROR_BASE
 - 1,

59 
	mAMEDIA_DRM_RESOURCE_BUSY
 = 
AMEDIA_DRM_ERROR_BASE
 - 2,

60 
	mAMEDIA_DRM_DEVICE_REVOKED
 = 
AMEDIA_DRM_ERROR_BASE
 - 3,

61 
	mAMEDIA_DRM_SHORT_BUFFER
 = 
AMEDIA_DRM_ERROR_BASE
 - 4,

62 
	mAMEDIA_DRM_SESSION_NOT_OPENED
 = 
AMEDIA_DRM_ERROR_BASE
 - 5,

63 
	mAMEDIA_DRM_TAMPER_DETECTED
 = 
AMEDIA_DRM_ERROR_BASE
 - 6,

64 
	mAMEDIA_DRM_VERIFY_FAILED
 = 
AMEDIA_DRM_ERROR_BASE
 - 7,

65 
	mAMEDIA_DRM_NEED_KEY
 = 
AMEDIA_DRM_ERROR_BASE
 - 8,

66 
	mAMEDIA_DRM_LICENSE_EXPIRED
 = 
AMEDIA_DRM_ERROR_BASE
 - 9,

68 } 
	tmedü_°©us_t
;

74 
	gAMedüCodec
;

75 
AMedüCodec
 
	tAMedüCodec
;

77 
	sAMedüCodecBuf„rInfo
 {

78 
öt32_t
 
	moff£t
;

79 
öt32_t
 
	msize
;

80 
öt64_t
 
	m¥e£¡©i⁄TimeUs
;

81 
uöt32_t
 
	mÊags
;

83 
AMedüCodecBuf„rInfo
 
	tAMedüCodecBuf„rInfo
;

86 
	mAMEDIACODEC_BUFFER_FLAG_END_OF_STREAM
 = 4,

87 
	mAMEDIACODEC_CONFIGURE_FLAG_ENCODE
 = 1,

88 
	mAMEDIACODEC_INFO_OUTPUT_BUFFERS_CHANGED
 = -3,

89 
	mAMEDIACODEC_INFO_OUTPUT_FORMAT_CHANGED
 = -2,

90 
	mAMEDIACODEC_INFO_TRY_AGAIN_LATER
 = -1

93 
	gAMedüF‹m©
;

94 
AMedüF‹m©
 
	tAMedüF‹m©
;

96 
	gAMedüCry±o
;

97 
AMedüCry±o
 
	tAMedüCry±o
;

103 
	gAMedüCodec
* (*
	tpf_AMedüCodec_¸óãCodecByName
)(c⁄° *
	t«me
);

105 
	$medü_°©us_t
 (*
	tpf_AMedüCodec_c⁄figuª
)(
	tAMedüCodec
*,

106 c⁄° 
	tAMedüF‹m©
* 
	tf‹m©
,

107 
	tAN©iveWödow
* 
	tsurÁ˚
,

108 
	tAMedüCry±o
 *
	t¸y±o
,

109 
	tuöt32_t
 
	tÊags
);

111 
	$medü_°©us_t
 (*
	tpf_AMedüCodec_°¨t
)(
	tAMedüCodec
*);

113 
	$medü_°©us_t
 (*
	tpf_AMedüCodec_°›
)(
	tAMedüCodec
*);

115 
	$medü_°©us_t
 (*
	tpf_AMedüCodec_Êush
)(
	tAMedüCodec
*);

117 
	$medü_°©us_t
 (*
	tpf_AMedüCodec_dñëe
)(
	tAMedüCodec
*);

119 
AMedüF‹m©
* (*
	tpf_AMedüCodec_gëOuçutF‹m©
)(
	tAMedüCodec
*);

121 
	$ssize_t
 (*
	tpf_AMedüCodec_dequeueI≈utBuf„r
)(
	tAMedüCodec
*,

122 
	töt64_t
 
	ttimeoutUs
);

124 
uöt8_t
* (*
	tpf_AMedüCodec_gëI≈utBuf„r
)(
	tAMedüCodec
*,

125 
	tsize_t
 
	tidx
, size_à*
	tout_size
);

127 
	$medü_°©us_t
 (*
	tpf_AMedüCodec_queueI≈utBuf„r
)(
	tAMedüCodec
*,

128 
	tsize_t
 
	tidx
, 
	toff_t
 
	toff£t
, size_à
	tsize
, 
	tuöt64_t
 
	ttime
, 
	tuöt32_t
 
	tÊags
);

130 
	$ssize_t
 (*
	tpf_AMedüCodec_dequeueOuçutBuf„r
)(
	tAMedüCodec
*,

131 
	tAMedüCodecBuf„rInfo
 *
	töfo
, 
	töt64_t
 
	ttimeoutUs
);

133 
uöt8_t
* (*
	tpf_AMedüCodec_gëOuçutBuf„r
)(
	tAMedüCodec
*,

134 
	tsize_t
 
	tidx
, size_à*
	tout_size
);

136 
	$medü_°©us_t
 (*
	tpf_AMedüCodec_ªÀa£OuçutBuf„r
)(
	tAMedüCodec
*,

137 
	tsize_t
 
	tidx
, 
	tboﬁ
 
	tªndî
);

139 
	$medü_°©us_t
 (*
	tpf_AMedüCodec_ªÀa£OuçutBuf„rAtTime
)(
	tAMedüCodec
*,

140 
	tsize_t
 
	tidx
, 
	töt64_t
 
	ttime°ampNs
);

142 
	$medü_°©us_t
 (*
	tpf_AMedüCodec_£tOuçutSurÁ˚
)(
	tAMedüCodec
*,

143 
	tAN©iveWödow
 *
	tsurÁ˚
);

145 
AMedüF‹m©
 *(*
	tpf_AMedüF‹m©_√w
)();

146 
	$medü_°©us_t
 (*
	tpf_AMedüF‹m©_dñëe
)(
	tAMedüF‹m©
*);

148 (*
	tpf_AMedüF‹m©_£tSåög
)(
	tAMedüF‹m©
*,

149 c⁄° * 
	t«me
, c⁄° * 
	tvÆue
);

151 (*
	tpf_AMedüF‹m©_£tI¡32
)(
	tAMedüF‹m©
*,

152 c⁄° * 
	t«me
, 
	töt32_t
 
	tvÆue
);

154 
	$boﬁ
 (*
	tpf_AMedüF‹m©_gëI¡32
)(
	tAMedüF‹m©
*,

155 c⁄° *
	t«me
, 
	töt32_t
 *
	tout
);

157 
	ssyms


160 
pf_AMedüCodec_¸óãCodecByName
 
¸óãCodecByName
;

161 
pf_AMedüCodec_c⁄figuª
 
c⁄figuª
;

162 
pf_AMedüCodec_°¨t
 
°¨t
;

163 
pf_AMedüCodec_°›
 
°›
;

164 
pf_AMedüCodec_Êush
 
Êush
;

165 
pf_AMedüCodec_dñëe
 
dñëeCodec
;

166 
pf_AMedüCodec_gëOuçutF‹m©
 
gëOuçutF‹m©
;

167 
pf_AMedüCodec_dequeueI≈utBuf„r
 
dequeueI≈utBuf„r
;

168 
pf_AMedüCodec_gëI≈utBuf„r
 
gëI≈utBuf„r
;

169 
pf_AMedüCodec_queueI≈utBuf„r
 
queueI≈utBuf„r
;

170 
pf_AMedüCodec_dequeueOuçutBuf„r
 
dequeueOuçutBuf„r
;

171 
pf_AMedüCodec_gëOuçutBuf„r
 
gëOuçutBuf„r
;

172 
pf_AMedüCodec_ªÀa£OuçutBuf„r
 
ªÀa£OuçutBuf„r
;

173 
pf_AMedüCodec_ªÀa£OuçutBuf„rAtTime
 
ªÀa£OuçutBuf„rAtTime
;

174 
pf_AMedüCodec_£tOuçutSurÁ˚
 
£tOuçutSurÁ˚
;

175 } 
AMedüCodec
;

177 
pf_AMedüF‹m©_√w
 
√wF‹m©
;

178 
pf_AMedüF‹m©_dñëe
 
dñëeF‹m©
;

179 
pf_AMedüF‹m©_£tSåög
 
£tSåög
;

180 
pf_AMedüF‹m©_£tI¡32
 
£tI¡32
;

181 
pf_AMedüF‹m©_gëI¡32
 
gëI¡32
;

182 } 
AMedüF‹m©
;

184 
syms
 syms;

186 
	smembîs


188 c⁄° *
«me
;

189 
off£t
;

190 
boﬁ
 
¸ôiˇl
;

192 
membîs
 members[] =

194 
	#OFF
(
x
Ë
	`off£tof
(
syms
, 
AMedüCodec
.x)

	)

195 { "AMedüCodec_¸óãCodecByName", 
	`OFF
(
¸óãCodecByName
), 
åue
 },

196 { "AMedüCodec_c⁄figuª", 
	`OFF
(
c⁄figuª
), 
åue
 },

197 { "AMedüCodec_°¨t", 
	`OFF
(
°¨t
), 
åue
 },

198 { "AMedüCodec_°›", 
	`OFF
(
°›
), 
åue
 },

199 { "AMedüCodec_Êush", 
	`OFF
(
Êush
), 
åue
 },

200 { "AMedüCodec_dñëe", 
	`OFF
(
dñëeCodec
), 
åue
 },

201 { "AMedüCodec_gëOuçutF‹m©", 
	`OFF
(
gëOuçutF‹m©
), 
åue
 },

202 { "AMedüCodec_dequeueI≈utBuf„r", 
	`OFF
(
dequeueI≈utBuf„r
), 
åue
 },

203 { "AMedüCodec_gëI≈utBuf„r", 
	`OFF
(
gëI≈utBuf„r
), 
åue
 },

204 { "AMedüCodec_queueI≈utBuf„r", 
	`OFF
(
queueI≈utBuf„r
), 
åue
 },

205 { "AMedüCodec_dequeueOuçutBuf„r", 
	`OFF
(
dequeueOuçutBuf„r
), 
åue
 },

206 { "AMedüCodec_gëOuçutBuf„r", 
	`OFF
(
gëOuçutBuf„r
), 
åue
 },

207 { "AMedüCodec_ªÀa£OuçutBuf„r", 
	`OFF
(
ªÀa£OuçutBuf„r
), 
åue
 },

208 { "AMedüCodec_ªÀa£OuçutBuf„rAtTime", 
	`OFF
(
ªÀa£OuçutBuf„rAtTime
), 
åue
 },

209 { "AMedüCodec_£tOuçutSurÁ˚", 
	`OFF
(
£tOuçutSurÁ˚
), 
Ál£
 },

210 #unde‡
OFF


211 
	#OFF
(
x
Ë
	`off£tof
(
syms
, 
AMedüF‹m©
.x)

	)

212 { "AMedüF‹m©_√w", 
	`OFF
(
√wF‹m©
), 
åue
 },

213 { "AMedüF‹m©_dñëe", 
	`OFF
(
dñëeF‹m©
), 
åue
 },

214 { "AMedüF‹m©_£tSåög", 
	`OFF
(
£tSåög
), 
åue
 },

215 { "AMedüF‹m©_£tI¡32", 
	`OFF
(
£tI¡32
), 
åue
 },

216 { "AMedüF‹m©_gëI¡32", 
	`OFF
(
gëI¡32
), 
åue
 },

217 #unde‡
OFF


218 { 
NULL
, 0, 
Ál£
 }

219 
	}
};

220 #unde‡
OFF


225 
boﬁ


226 
	$InôSymbﬁs
(
mc_≠i
 *
≠i
)

228 
i_öô_°©e
 = -1;

229 
boﬁ
 
ªt
;

230 *
ndk_h™dÀ
 = 
NULL
;

232 
	`±hªad_muãx_lock
(&
g_muãx
);

234 i‡(
i_öô_°©e
 != -1)

235 
íd
;

237 
i_öô_°©e
 = 0;

239 
ndk_h™dÀ
 = 
	`dl›í
("libmedündk.so", 
RTLD_NOW
);

240 i‡(!
ndk_h™dÀ
)

241 
íd
;

243 
i
 = 0; 
membîs
[i].
«me
; i++)

245 *
sym
 = 
	`dlsym
(
ndk_h™dÀ
, 
membîs
[
i
].
«me
);

246 i‡(!
sym
 && 
membîs
[
i
].
¸ôiˇl
)

248 
	`dl˛o£
(
ndk_h™dÀ
);

249 
íd
;

251 *(**)((
uöt8_t
*)&
syms
 + 
membîs
[
i
].
off£t
Ë
sym
;

254 
i_öô_°©e
 = 1;

255 
íd
:

256 
ªt
 = 
i_öô_°©e
 == 1;

257 i‡(!
ªt
)

258 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "MediaCodec NDK init failed.\n");

260 
	`±hªad_muãx_u∆ock
(&
g_muãx
);

261  
ªt
;

262 
	}
}

268 
	smc_≠i_sys


270 
AMedüCodec
* 
	mp_codec
;

271 
AMedüF‹m©
* 
	mp_f‹m©
;

272 
AMedüCodecBuf„rInfo
 
	möfo
;

278 
	$St›
(
mc_≠i
 *
≠i
)

280 
mc_≠i_sys
 *
p_sys
 = 
≠i
->p_sys;

282 
≠i
->
b_dúe˘_ªndîög
 = 
Ál£
;

284 i‡(
p_sys
->
p_codec
)

286 i‡(
≠i
->
b_°¨ãd
)

288 
syms
.
AMedüCodec
.
	`°›
(
p_sys
->
p_codec
);

289 
≠i
->
b_°¨ãd
 = 
Ál£
;

291 
syms
.
AMedüCodec
.
	`dñëeCodec
(
p_sys
->
p_codec
);

292 
p_sys
->
p_codec
 = 
NULL
;

294 i‡(
p_sys
->
p_f‹m©
)

296 
syms
.
AMedüF‹m©
.
	`dñëeF‹m©
(
p_sys
->
p_f‹m©
);

297 
p_sys
->
p_f‹m©
 = 
NULL
;

300 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "MediaCodec via NDK closed");

302 
	}
}

307 
	$Sèπ
(
mc_≠i
 *
≠i
, 
mc_≠i_¨gs
 *
p_¨gs
)

309 
mc_≠i_sys
 *
p_sys
 = 
≠i
->p_sys;

310 
i_ªt
 = 
MC_API_ERROR
;

311 
AN©iveWödow
 *
p_™w
 = 
NULL
;

313 
p_sys
->
p_codec
 = 
syms
.
AMedüCodec
.
	`¸óãCodecByName
(
≠i
->
psz_«me
);

314 i‡(!
p_sys
->
p_codec
)

316 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "AMediaCodec.createCodecByName for %s failed",

317 
≠i
->
psz_«me
);

318 
îr‹
;

321 
p_sys
->
p_f‹m©
 = 
syms
.
AMedüF‹m©
.
	`√wF‹m©
();

322 i‡(!
p_sys
->
p_f‹m©
)

324 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "AMediaFormat.new failed");

325 
îr‹
;

328 
syms
.
AMedüF‹m©
.
	`£tI¡32
(
p_sys
->
p_f‹m©
, "encoder", 0);

331 
syms
.
AMedüF‹m©
.
	`£tI¡32
(
p_sys
->
p_f‹m©
, "max-input-size", 0);

332 i‡(
≠i
->
i_ˇt
 =
VIDEO_ES
)

334 
syms
.
AMedüF‹m©
.
	`£tI¡32
(
p_sys
->
p_f‹m©
, "width", 
p_¨gs
->
video
.
i_width
);

335 
syms
.
AMedüF‹m©
.
	`£tI¡32
(
p_sys
->
p_f‹m©
, "height", 
p_¨gs
->
video
.
i_height
);

336 
syms
.
AMedüF‹m©
.
	`£tI¡32
(
p_sys
->
p_f‹m©
, "rŸ©i⁄-degªes", 
p_¨gs
->
video
.
i_™gÀ
);

337 i‡(
p_¨gs
->
video
.
p_surÁ˚
)

339 
p_™w
 = (
AN©iveWödow
 *)
p_¨gs
->
video
.
p_surÁ˚
;

340 i‡(
p_¨gs
->
video
.
b_tu¬ñed_∂ayback
)

341 
syms
.
AMedüF‹m©
.
	`£tI¡32
(
p_sys
->
p_f‹m©
,

343 i‡(
p_¨gs
->
video
.
b_ad≠tive_∂ayback
)

344 
syms
.
AMedüF‹m©
.
	`£tI¡32
(
p_sys
->
p_f‹m©
,

350 
syms
.
AMedüF‹m©
.
	`£tI¡32
(
p_sys
->
p_f‹m©
, "ßm∂e-øã", 
p_¨gs
->
audio
.
i_ßm∂e_øã
);

351 
syms
.
AMedüF‹m©
.
	`£tI¡32
(
p_sys
->
p_f‹m©
, "ch™√l-cou¡", 
p_¨gs
->
audio
.
i_ch™√l_cou¡
);

354 i‡(
syms
.
AMedüCodec
.
	`c⁄figuª
(
p_sys
->
p_codec
,Ö_sys->
p_f‹m©
,

355 
p_™w
, 
NULL
, 0Ë!
AMEDIA_OK
)

357 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "AMediaCodec.configure failed");

358 
îr‹
;

360 i‡(
syms
.
AMedüCodec
.
	`°¨t
(
p_sys
->
p_codec
Ë!
AMEDIA_OK
)

362 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "AMediaCodec.start failed");

363 
îr‹
;

366 
≠i
->
b_°¨ãd
 = 
åue
;

367 
≠i
->
b_dúe˘_ªndîög
 = !!
p_™w
;

368 
i_ªt
 = 0;

370 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "MediaCodec via NDK opened");

371 
îr‹
:

372 i‡(
i_ªt
 != 0)

373 
	`St›
(
≠i
);

374  
i_ªt
;

375 
	}
}

380 
	$Flush
(
mc_≠i
 *
≠i
)

382 
mc_≠i_sys
 *
p_sys
 = 
≠i
->p_sys;

384 i‡(
syms
.
AMedüCodec
.
	`Êush
(
p_sys
->
p_codec
Ë=
AMEDIA_OK
)

387  
MC_API_ERROR
;

388 
	}
}

393 
	$DequeueI≈ut
(
mc_≠i
 *
≠i
, 
öt64_t
 
i_timeout
)

395 
mc_≠i_sys
 *
p_sys
 = 
≠i
->p_sys;

396 
ssize_t
 
i_ödex
;

398 
i_ödex
 = 
syms
.
AMedüCodec
.
	`dequeueI≈utBuf„r
(
p_sys
->
p_codec
, 
i_timeout
);

399 i‡(
i_ödex
 >= 0)

400  
i_ödex
;

401 i‡(
i_ödex
 =
AMEDIACODEC_INFO_TRY_AGAIN_LATER
)

402  
MC_API_INFO_TRYAGAIN
;

405 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "AMediaCodec.dequeueInputBuffer failed\n");

406  
MC_API_ERROR
;

408 
	}
}

413 
	$QueueI≈ut
(
mc_≠i
 *
≠i
, 
i_ödex
, c⁄° *
p_buf
,

414 
size_t
 
i_size
, 
uöt64_t
 
i_ts
, 
boﬁ
 
b_c⁄fig
)

416 
mc_≠i_sys
 *
p_sys
 = 
≠i
->p_sys;

417 
uöt8_t
 *
p_mc_buf
;

418 
size_t
 
i_mc_size
;

419 
i_Êags
 = (
b_c⁄fig
 ? 
AMEDIACODEC_FLAG_CODEC_CONFIG
 : 0)

420 | (
p_buf
 =
NULL
 ? 
AMEDIACODEC_BUFFER_FLAG_END_OF_STREAM
 : 0);

422 
	`as£π
(
i_ödex
 >= 0);

424 
p_mc_buf
 = 
syms
.
AMedüCodec
.
	`gëI≈utBuf„r
(
p_sys
->
p_codec
,

425 
i_ödex
, &
i_mc_size
);

426 i‡(!
p_mc_buf
)

427  
MC_API_ERROR
;

429 i‡(
i_mc_size
 > 
i_size
)

430 
i_mc_size
 = 
i_size
;

431 
	`mem˝y
(
p_mc_buf
, 
p_buf
, 
i_mc_size
);

433 i‡(
syms
.
AMedüCodec
.
	`queueI≈utBuf„r
(
p_sys
->
p_codec
, 
i_ödex
, 0, 
i_mc_size
,

434 
i_ts
, 
i_Êags
Ë=
AMEDIA_OK
)

438 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "AMediaCodec.queueInputBuffer failed.\n");

439  
MC_API_ERROR
;

441 
	}
}

443 
öt32_t
 
	$GëF‹m©I¡egî
(
AMedüF‹m©
 *
p_f‹m©
, c⁄° *
psz_«me
)

445 
öt32_t
 
i_out
 = 0;

446 
syms
.
AMedüF‹m©
.
	`gëI¡32
(
p_f‹m©
, 
psz_«me
, &
i_out
);

447  
i_out
;

448 
	}
}

453 
	$DequeueOuçut
(
mc_≠i
 *
≠i
, 
öt64_t
 
i_timeout
)

455 
mc_≠i_sys
 *
p_sys
 = 
≠i
->p_sys;

456 
ssize_t
 
i_ödex
;

458 
i_ödex
 = 
syms
.
AMedüCodec
.
	`dequeueOuçutBuf„r
(
p_sys
->
p_codec
, &p_sys->
öfo
,

459 
i_timeout
);

461 i‡(
i_ödex
 >= 0)

462  
i_ödex
;

463 i‡(
i_ödex
 =
AMEDIACODEC_INFO_TRY_AGAIN_LATER
)

464  
MC_API_INFO_TRYAGAIN
;

465 i‡(
i_ödex
 =
AMEDIACODEC_INFO_OUTPUT_BUFFERS_CHANGED
)

466  
MC_API_INFO_OUTPUT_BUFFERS_CHANGED
;

467 i‡(
i_ödex
 =
AMEDIACODEC_INFO_OUTPUT_FORMAT_CHANGED
)

468  
MC_API_INFO_OUTPUT_FORMAT_CHANGED
;

471 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "AMediaCodec.dequeueOutputBuffer failed.\n");

472  
MC_API_ERROR
;

474 
	}
}

479 
	$GëOuçut
(
mc_≠i
 *
≠i
, 
i_ödex
, 
mc_≠i_out
 *
p_out
)

481 
mc_≠i_sys
 *
p_sys
 = 
≠i
->p_sys;

483 i‡(
i_ödex
 >= 0)

485 
p_out
->
ty≥
 = 
MC_OUT_TYPE_BUF
;

486 
p_out
->
buf
.
i_ödex
 = i_index;

488 
p_out
->
buf
.
i_ts
 = 
p_sys
->
öfo
.
¥e£¡©i⁄TimeUs
;

489 
p_out
->
b_eos
 = 
p_sys
->
öfo
.
Êags
 & 
AMEDIACODEC_BUFFER_FLAG_END_OF_STREAM
;

491 i‡(
≠i
->
b_dúe˘_ªndîög
)

493 
p_out
->
buf
.
p_±r
 = 
NULL
;

494 
p_out
->
buf
.
i_size
 = 0;

498 
size_t
 
i_mc_size
;

499 
uöt8_t
 *
p_mc_buf
 = 
syms
.
AMedüCodec
.
	`gëOuçutBuf„r
(
p_sys
->
p_codec
,

500 
i_ödex
,

501 &
i_mc_size
);

503 i‡(!
p_mc_buf
 && !
p_out
->
b_eos
)

505 
	`Jni_Pröt
(
ANDROID_LOG_INFO
, 
TAG
, "AMediaCodec.getOutputBuffer failed.\n");

506  
MC_API_ERROR
;

508 
p_out
->
buf
.
p_±r
 = 
p_mc_buf
 + 
p_sys
->
öfo
.
off£t
;

509 
p_out
->
buf
.
i_size
 = 
p_sys
->
öfo
.
size
;

513 i‡(
i_ödex
 =
MC_API_INFO_OUTPUT_FORMAT_CHANGED
)

515 
AMedüF‹m©
 *
f‹m©
 = 
syms
.
AMedüCodec
.
	`gëOuçutF‹m©
(
p_sys
->
p_codec
);

517 
p_out
->
ty≥
 = 
MC_OUT_TYPE_CONF
;

518 
p_out
->
b_eos
 = 
Ál£
;

519 i‡(
≠i
->
i_ˇt
 =
VIDEO_ES
)

521 
p_out
->
c⁄f
.
video
.
width
 = 
	`GëF‹m©I¡egî
(
f‹m©
, "width");

522 
p_out
->
c⁄f
.
video
.
height
 = 
	`GëF‹m©I¡egî
(
f‹m©
, "height");

523 
p_out
->
c⁄f
.
video
.
°ride
 = 
	`GëF‹m©I¡egî
(
f‹m©
, "stride");

524 
p_out
->
c⁄f
.
video
.
¶i˚_height
 = 
	`GëF‹m©I¡egî
(
f‹m©
, "slice-height");

525 
p_out
->
c⁄f
.
video
.
pixñ_f‹m©
 = 
	`GëF‹m©I¡egî
(
f‹m©
, "color-format");

526 
p_out
->
c⁄f
.
video
.
¸›_À·
 = 
	`GëF‹m©I¡egî
(
f‹m©
, "crop-left");

527 
p_out
->
c⁄f
.
video
.
¸›_t›
 = 
	`GëF‹m©I¡egî
(
f‹m©
, "crop-top");

528 
p_out
->
c⁄f
.
video
.
¸›_right
 = 
	`GëF‹m©I¡egî
(
f‹m©
, "crop-right");

529 
p_out
->
c⁄f
.
video
.
¸›_bŸtom
 = 
	`GëF‹m©I¡egî
(
f‹m©
, "crop-bottom");

533 
p_out
->
c⁄f
.
audio
.
ch™√l_cou¡
 = 
	`GëF‹m©I¡egî
(
f‹m©
, "channel-count");

534 
p_out
->
c⁄f
.
audio
.
ch™√l_mask
 = 
	`GëF‹m©I¡egî
(
f‹m©
, "channel-mask");

535 
p_out
->
c⁄f
.
audio
.
ßm∂e_øã
 = 
	`GëF‹m©I¡egî
(
f‹m©
, "sample-rate");

540 
	}
}

545 
	$Rñó£Ouçut
(
mc_≠i
 *
≠i
, 
i_ödex
, 
boﬁ
 
b_ªndî
)

547 
mc_≠i_sys
 *
p_sys
 = 
≠i
->p_sys;

549 
	`as£π
(
i_ödex
 >= 0);

550 i‡(
syms
.
AMedüCodec
.
	`ªÀa£OuçutBuf„r
(
p_sys
->
p_codec
, 
i_ödex
, 
b_ªndî
)

551 =
AMEDIA_OK
)

554  
MC_API_ERROR
;

555 
	}
}

560 
	$Rñó£OuçutAtTime
(
mc_≠i
 *
≠i
, 
i_ödex
, 
öt64_t
 
i_ts_ns
)

562 
mc_≠i_sys
 *
p_sys
 = 
≠i
->p_sys;

564 
	`as£π
(
i_ödex
 >= 0);

565 i‡(
syms
.
AMedüCodec
.
	`ªÀa£OuçutBuf„rAtTime
(
p_sys
->
p_codec
, 
i_ödex
, 
i_ts_ns
)

566 =
AMEDIA_OK
)

569  
MC_API_ERROR
;

570 
	}
}

575 
	$SëOuçutSurÁ˚
(
mc_≠i
 *
≠i
, *
p_surÁ˚
, *
p_jsurÁ˚
)

577 (Ë
p_jsurÁ˚
;

578 
	`as£π
(
p_surÁ˚
 !
NULL
);

579 
mc_≠i_sys
 *
p_sys
 = 
≠i
->p_sys;

581  
syms
.
AMedüCodec
.
£tOuçutSurÁ˚
 !
NULL


582 && 
syms
.
AMedüCodec
.
	`£tOuçutSurÁ˚
(
p_sys
->
p_codec
, (
AN©iveWödow
 *)
p_surÁ˚
)

583 =
AMEDIA_OK
 ? 0 : 
MC_API_ERROR
;

584 
	}
}

589 
	$CÀ™
(
mc_≠i
 *
≠i
)

591 
	`‰ì
(
≠i
->
psz_«me
);

592 
	`‰ì
(
≠i
->
p_sys
);

593 
	}
}

598 
	$C⁄figuª
(
mc_≠i
 * 
≠i
, 
i_¥ofûe
)

601 
	`‰ì
(
≠i
->
psz_«me
);

602 
boﬁ
 
b_ad≠tive
;

603 
≠i
->
psz_«me
 = 
	`MedüCodec_GëName
◊pi->
p_obj
,ápi->
psz_mime
,

604 
i_¥ofûe
, &
b_ad≠tive
);

605 i‡(!
≠i
->
psz_«me
)

606  
MC_API_ERROR
;

607 
≠i
->
i_quúks
 = 
	`OMXCodec_GëQuúks
◊pi->
i_ˇt
,ápi->
i_codec
,ápi->
psz_«me
,

608 
	`°æí
(
≠i
->
psz_«me
));

610 
≠i
->
i_quúks
 |
MC_API_VIDEO_QUIRKS_SUPPORT_INTERLACED
;

611 i‡(
b_ad≠tive
)

612 
≠i
->
i_quúks
 |
MC_API_VIDEO_QUIRKS_ADAPTIVE
;

615 
	}
}

620 
	$MedüCodecNdk_Inô
(
mc_≠i
 *
≠i
)

622 i‡(!
	`InôSymbﬁs
(
≠i
))

623  
MC_API_ERROR
;

625 
≠i
->
p_sys
 = (
mc_≠i_sys
 *)
	`ˇŒoc
(1, (mc_api_sys));

626 i‡(!
≠i
->
p_sys
)

627  
MC_API_ERROR
;

629 
≠i
->
˛ón
 = 
CÀ™
;

630 
≠i
->
c⁄figuª
 = 
C⁄figuª
;

631 
≠i
->
°¨t
 = 
Sèπ
;

632 
≠i
->
°›
 = 
St›
;

633 
≠i
->
Êush
 = 
Flush
;

634 
≠i
->
dequeue_ö
 = 
DequeueI≈ut
;

635 
≠i
->
queue_ö
 = 
QueueI≈ut
;

636 
≠i
->
dequeue_out
 = 
DequeueOuçut
;

637 
≠i
->
gë_out
 = 
GëOuçut
;

638 
≠i
->
ªÀa£_out
 = 
Rñó£Ouçut
;

639 
≠i
->
ªÀa£_out_ts
 = 
Rñó£OuçutAtTime
;

640 
≠i
->
£t_ouçut_surÁ˚
 = 
SëOuçutSurÁ˚
;

642 
≠i
->
b_suµ‹t_rŸ©i⁄
 = 
åue
;

644 
	}
}

	@
1
.
0
3
43
Native.cpp
mediacodec.h
mediacodec_ndk.cpp
